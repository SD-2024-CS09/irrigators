% put these into config file
% Define initial conditions and bounds
initialWaterLevel = 15;  % Initial water level (within bounds)
lowerBound = 10;         % Minimum acceptable water level
upperBound = 20;         % Maximum acceptable water level

thingSpeakCommConfigFile = "tsconfig.json";
stateMachineConfigFile = "smconfig.json";
serverUpdateFile = "webserverpipe.json";

thingSpeakCommConfig = JSONtoObj(mqttConfigFile);
mqttConfig = thingSpeakCommConfig.mqttSensor;
requestSensorConfig = thingSpeakCommConfig.requestSensor;
requestStateConfig = thingSpeakCommConfig.requestState;

stateMachineConfig = JSONtoObj(stateMachineConfigFile);

% Initialize the StateMachine object
wateringStateMachine = statemachine.sm(stateMachineConfig.state, stateMachineConfig.lowerBound, stateMachineConfig.upperBound);

% MQTT client for ThingSpeak sensor channels
thingSpeakMQTTClient = mqttclient(brokerURL,Port=port,ClientID=clientID,Username=username,Password=password);

% Post request handlers for ThingSpeak sensor and state channels channel
thingSpeakSensorRequest = ts_connection(requestSensorConfig.channelID, requestSensorConfig.readAPIKey, requestSensorConfig.writeAPIKey);
thingSpeakUpdateStateRequest = ts_connection(requestStateConfig.channelID, requestStateConfig.readAPIKey, requestStateConfig.writeAPIKey);
% Set the current water level
currentWaterLevel = initialWaterLevel;

function client = initMQTTClientFromConfig(mqttConfig)
    client = mqttclient(cargs.broker_url,Port=cargs.port,ClientID=cargs.client_id,Username=cargs.username,Password=cargs.password);
    topics = convertCharsToStrings(cargs.subscription_topics)';
    for topic = topics
        subscribe(mqClient, topic);
    end
end

% Reads a Json file passed by file name into an object with JSON values as
% properties.
function newObj = JSONtoObj(jsonFile)
    f = fopen(jsonFile);
    raw_text = fread(f);
    json = char(raw_text');
    newObj = jsondecode(json);
    fclose(f);
end

% Callback to run on receiving new data from Thingspeak MQQT Broker for
% value channels
function success = updateMachineOnMQTTCallback(topic, data)
    % Get the current decision from the state machine
    decision = stateMachine.makeDecision(data);
    if decison ~= stateMachine.currentState()
        success = thingSpeakUpdateStateRequest.writeChannel(1, decision);
        if success
            stateMachine.updateState(decision);
        end
    end
end